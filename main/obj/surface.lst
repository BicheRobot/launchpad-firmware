
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main\obj\surface.o:     file format elf32-littlearm
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main\obj\surface.o


Disassembly of section .text.BLANK_func:

00000000 <BLANK_func>:
BLANK_func():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:556
// Surface Functions : called in interrupt mode
// ____________________________________________________________________________
//

void BLANK_func()
{
   0:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:560
    u8 address,i,d;

    // advance column
    if (++Col == 3)
   4:	4a3a      	ldr	r2, [pc, #232]	; (f0 <BLANK_func+0xf0>)
   6:	7813      	ldrb	r3, [r2, #0]
   8:	f103 0301 	add.w	r3, r3, #1
   c:	b2db      	uxtb	r3, r3
   e:	7013      	strb	r3, [r2, #0]
  10:	2b03      	cmp	r3, #3
  12:	d11b      	bne.n	4c <BLANK_func+0x4c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:562
    {
        Col = 0;
  14:	f04f 0200 	mov.w	r2, #0
  18:	4b35      	ldr	r3, [pc, #212]	; (f0 <BLANK_func+0xf0>)
  1a:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:564
        // advance bright bit we're searching for
        if (++BrightBit == 6)
  1c:	4a35      	ldr	r2, [pc, #212]	; (f4 <BLANK_func+0xf4>)
  1e:	7813      	ldrb	r3, [r2, #0]
  20:	f103 0301 	add.w	r3, r3, #1
  24:	b2db      	uxtb	r3, r3
  26:	7013      	strb	r3, [r2, #0]
  28:	2b06      	cmp	r3, #6
  2a:	d10f      	bne.n	4c <BLANK_func+0x4c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:566
        {
            BrightBit = 0;
  2c:	f04f 0200 	mov.w	r2, #0
  30:	4b30      	ldr	r3, [pc, #192]	; (f4 <BLANK_func+0xf4>)
  32:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:567
            if (++ColOrder == 3)
  34:	4a30      	ldr	r2, [pc, #192]	; (f8 <BLANK_func+0xf8>)
  36:	7813      	ldrb	r3, [r2, #0]
  38:	f103 0301 	add.w	r3, r3, #1
  3c:	b2db      	uxtb	r3, r3
  3e:	7013      	strb	r3, [r2, #0]
  40:	2b03      	cmp	r3, #3
  42:	d103      	bne.n	4c <BLANK_func+0x4c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:569
            {
                ColOrder = 0;
  44:	f04f 0200 	mov.w	r2, #0
  48:	4b2b      	ldr	r3, [pc, #172]	; (f8 <BLANK_func+0xf8>)
  4a:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:574
            }
        }
    }

    CurrentCol = COLORDER[ColOrder][Col];
  4c:	4b2b      	ldr	r3, [pc, #172]	; (fc <BLANK_func+0xfc>)
  4e:	4a2a      	ldr	r2, [pc, #168]	; (f8 <BLANK_func+0xf8>)
  50:	7812      	ldrb	r2, [r2, #0]
  52:	4927      	ldr	r1, [pc, #156]	; (f0 <BLANK_func+0xf0>)
  54:	7809      	ldrb	r1, [r1, #0]
  56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  5a:	1852      	adds	r2, r2, r1
  5c:	5c99      	ldrb	r1, [r3, r2]
  5e:	4a28      	ldr	r2, [pc, #160]	; (100 <BLANK_func+0x100>)
  60:	7011      	strb	r1, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:577

    // turn off column drivers
    poke(GPIOB_BSRR, COL0+COL1+COL2);
  62:	f04f 0007 	mov.w	r0, #7
  66:	4a27      	ldr	r2, [pc, #156]	; (104 <BLANK_func+0x104>)
  68:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:580

    // put shift registers into load mode
    poke(GPIOA_BSRR, SW_SHIFT<<16);
  6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  6e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
  72:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:583

    //calculate next shift values
    address = CurrentCol*NLEDBITS;
  74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
  78:	ea4f 01c1 	mov.w	r1, r1, lsl #3
  7c:	b2c9      	uxtb	r1, r1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:590
    d=0;
    for (i=0; i<NLEDBITS; i++)
    {
        d >>= 1;

        if ((LedValue[DisplayBank][address]) & (1<<BRIGHT_TIMES[BrightBit][0])) // see if current bright bit is set for led value
  7e:	4a22      	ldr	r2, [pc, #136]	; (108 <BLANK_func+0x108>)
  80:	7810      	ldrb	r0, [r2, #0]
  82:	4a1c      	ldr	r2, [pc, #112]	; (f4 <BLANK_func+0xf4>)
  84:	7812      	ldrb	r2, [r2, #0]
  86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  8a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  8e:	899b      	ldrh	r3, [r3, #12]
  90:	f04f 0601 	mov.w	r6, #1
  94:	fa06 f603 	lsl.w	r6, r6, r3
  98:	f04f 0300 	mov.w	r3, #0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:585
    poke(GPIOA_BSRR, SW_SHIFT<<16);

    //calculate next shift values
    address = CurrentCol*NLEDBITS;

    d=0;
  9c:	461a      	mov	r2, r3
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:590
    for (i=0; i<NLEDBITS; i++)
    {
        d >>= 1;

        if ((LedValue[DisplayBank][address]) & (1<<BRIGHT_TIMES[BrightBit][0])) // see if current bright bit is set for led value
  9e:	4d1b      	ldr	r5, [pc, #108]	; (10c <BLANK_func+0x10c>)
  a0:	f04f 04a8 	mov.w	r4, #168	; 0xa8
  a4:	fb04 f400 	mul.w	r4, r4, r0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:597
            d |= 0x80;
        }
        address++;
        if ((i & 7) == 7)
        {
            LedData[i>>3] = ~d;
  a8:	f8df c064 	ldr.w	ip, [pc, #100]	; 110 <BLANK_func+0x110>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:598
            d=0;
  ac:	461f      	mov	r7, r3
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:590
    d=0;
    for (i=0; i<NLEDBITS; i++)
    {
        d >>= 1;

        if ((LedValue[DisplayBank][address]) & (1<<BRIGHT_TIMES[BrightBit][0])) // see if current bright bit is set for led value
  ae:	fa5f f883 	uxtb.w	r8, r3
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:588
    address = CurrentCol*NLEDBITS;

    d=0;
    for (i=0; i<NLEDBITS; i++)
    {
        d >>= 1;
  b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:590

        if ((LedValue[DisplayBank][address]) & (1<<BRIGHT_TIMES[BrightBit][0])) // see if current bright bit is set for led value
  b6:	1860      	adds	r0, r4, r1
  b8:	5c28      	ldrb	r0, [r5, r0]
  ba:	4230      	tst	r0, r6
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:592
        {
            d |= 0x80;
  bc:	bf1c      	itt	ne
  be:	f062 027f 	ornne	r2, r2, #127	; 0x7f
  c2:	b2d2      	uxtbne	r2, r2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:595
        }
        address++;
        if ((i & 7) == 7)
  c4:	f003 0007 	and.w	r0, r3, #7
  c8:	2807      	cmp	r0, #7
  ca:	d106      	bne.n	da <BLANK_func+0xda>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:597
        {
            LedData[i>>3] = ~d;
  cc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  d0:	ea6f 0202 	mvn.w	r2, r2
  d4:	f80c 2008 	strb.w	r2, [ip, r8]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:598
            d=0;
  d8:	463a      	mov	r2, r7
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:597
            d |= 0x80;
        }
        address++;
        if ((i & 7) == 7)
        {
            LedData[i>>3] = ~d;
  da:	f103 0301 	add.w	r3, r3, #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:586

    //calculate next shift values
    address = CurrentCol*NLEDBITS;

    d=0;
    for (i=0; i<NLEDBITS; i++)
  de:	2b38      	cmp	r3, #56	; 0x38
  e0:	d003      	beq.n	ea <BLANK_func+0xea>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:594

        if ((LedValue[DisplayBank][address]) & (1<<BRIGHT_TIMES[BrightBit][0])) // see if current bright bit is set for led value
        {
            d |= 0x80;
        }
        address++;
  e2:	f101 0101 	add.w	r1, r1, #1
  e6:	b2c9      	uxtb	r1, r1
  e8:	e7e1      	b.n	ae <BLANK_func+0xae>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:601
        {
            LedData[i>>3] = ~d;
            d=0;
        }
    }
}
  ea:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
  ee:	4770      	bx	lr
	...
 104:	40010c10 	.word	0x40010c10
	...

Disassembly of section .text.LEDSHIFT_func:

00000000 <LEDSHIFT_func>:
LEDSHIFT_func():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:608
// ____________________________________________________________________________
//

void LEDSHIFT_func()
{
    poke_set(DMA1_CCR5, 1<<0); // enable DMA
   0:	681a4b02 	.word	0x681a4b02
   4:	f042 0201 	orr.w	r2, r2, #1
   8:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:609
}
   a:	4770      	bx	lr
   c:	40020058 	.word	0x40020058

Disassembly of section .text.BRIGHT_func:

00000000 <BRIGHT_func>:
BRIGHT_func():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:616
// ____________________________________________________________________________
//

void BRIGHT_func()
{
    if (SurfaceOn)
   0:	4b0c      	ldr	r3, [pc, #48]	; (34 <BRIGHT_func+0x34>)
   2:	781b      	ldrb	r3, [r3, #0]
   4:	b1ab      	cbz	r3, 32 <BRIGHT_func+0x32>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:618
    {
        switch (CurrentCol) // light current column driver
   6:	4b0c      	ldr	r3, [pc, #48]	; (38 <BRIGHT_func+0x38>)
   8:	781b      	ldrb	r3, [r3, #0]
   a:	2b01      	cmp	r3, #1
   c:	d008      	beq.n	20 <BRIGHT_func+0x20>
   e:	b113      	cbz	r3, 16 <BRIGHT_func+0x16>
  10:	2b02      	cmp	r3, #2
  12:	d10e      	bne.n	32 <BRIGHT_func+0x32>
  14:	e009      	b.n	2a <BRIGHT_func+0x2a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:620
        {
            case 0 : poke(GPIOB_BSRR,COL0<<16); break;
  16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  1a:	4b08      	ldr	r3, [pc, #32]	; (3c <BRIGHT_func+0x3c>)
  1c:	601a      	str	r2, [r3, #0]
  1e:	4770      	bx	lr
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:621
            case 1 : poke(GPIOB_BSRR,COL1<<16); break;
  20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  24:	4b05      	ldr	r3, [pc, #20]	; (3c <BRIGHT_func+0x3c>)
  26:	601a      	str	r2, [r3, #0]
  28:	4770      	bx	lr
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:622
            case 2 : poke(GPIOB_BSRR,COL2<<16); break;
  2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  2e:	4b03      	ldr	r3, [pc, #12]	; (3c <BRIGHT_func+0x3c>)
  30:	601a      	str	r2, [r3, #0]
  32:	4770      	bx	lr
	...
  3c:	40010c10 	.word	0x40010c10

Disassembly of section .text.SWWAIT_func:

00000000 <SWWAIT_func>:
SWWAIT_func():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:633
//

void SWWAIT_func()
{
    // put shift registers into shift mode
    poke(GPIOA_BSRR, SW_SHIFT);
   0:	0210f04f 	.word	0x0210f04f
   4:	4b04      	ldr	r3, [pc, #16]	; (18 <SWWAIT_func+0x18>)
   6:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:635

    if (!ForceFullBrightness)
   8:	4b04      	ldr	r3, [pc, #16]	; (1c <SWWAIT_func+0x1c>)
   a:	781b      	ldrb	r3, [r3, #0]
   c:	b91b      	cbnz	r3, 16 <SWWAIT_func+0x16>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:638
    {
        // turn off column drivers in low power mode
        poke(GPIOB_BSRR, COL0+COL1+COL2);
   e:	f04f 0207 	mov.w	r2, #7
  12:	4b03      	ldr	r3, [pc, #12]	; (20 <SWWAIT_func+0x20>)
  14:	601a      	str	r2, [r3, #0]
  16:	4770      	bx	lr
  18:	40010810 	.word	0x40010810
  1c:	00000000 	.word	0x00000000
  20:	40010c10 	.word	0x40010c10

Disassembly of section .text.SWSHIFT_func:

00000000 <SWSHIFT_func>:
SWSHIFT_func():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:647
// ____________________________________________________________________________
//

void SWSHIFT_func()
{
    if ((BrightBit == 1) || (BrightBit == 3) || (BrightBit == 5))
   0:	4b0d      	ldr	r3, [pc, #52]	; (38 <SWSHIFT_func+0x38>)
   2:	781b      	ldrb	r3, [r3, #0]
   4:	2b01      	cmp	r3, #1
   6:	d003      	beq.n	10 <SWSHIFT_func+0x10>
   8:	2b03      	cmp	r3, #3
   a:	d001      	beq.n	10 <SWSHIFT_func+0x10>
   c:	2b05      	cmp	r3, #5
   e:	d111      	bne.n	34 <SWSHIFT_func+0x34>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:649
    {
        poke_set(DMA1_CCR3, 1<<0); // enable Tx DMA
  10:	4b0a      	ldr	r3, [pc, #40]	; (3c <SWSHIFT_func+0x3c>)
  12:	681a      	ldr	r2, [r3, #0]
  14:	f042 0201 	orr.w	r2, r2, #1
  18:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:650
        pokep(DMA1_CMAR2, &SwitchData[CurrentCol*NSWBYTES]); // Transfer to SwitchData for correct col
  1a:	4b09      	ldr	r3, [pc, #36]	; (40 <SWSHIFT_func+0x40>)
  1c:	781a      	ldrb	r2, [r3, #0]
  1e:	4b09      	ldr	r3, [pc, #36]	; (44 <SWSHIFT_func+0x44>)
  20:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  24:	4b08      	ldr	r3, [pc, #32]	; (48 <SWSHIFT_func+0x48>)
  26:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:651
        poke_set(DMA1_CCR2, 1<<0); // enable DMA
  28:	f1a3 030c 	sub.w	r3, r3, #12
  2c:	681a      	ldr	r2, [r3, #0]
  2e:	f042 0201 	orr.w	r2, r2, #1
  32:	601a      	str	r2, [r3, #0]
  34:	4770      	bx	lr
  36:	bf00      	nop
  38:	00000000 	.word	0x00000000
  3c:	40020030 	.word	0x40020030
	...
  48:	40020028 	.word	0x40020028

Disassembly of section .text.surface_init:

00000000 <surface_init>:
surface_init():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:117

// ____________________________________________________________________________
//

void surface_init()
{
   0:	b470      	push	{r4, r5, r6}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:120
    // Reset SPI before setting up
    // This is necessary to tidy up after bootloader mode
    poke(RCC_APB2RSTR, 0x1000);
   2:	4a7a      	ldr	r2, [pc, #488]	; (1ec <surface_init+0x1ec>)
   4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8:	6013      	str	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:121
    poke(RCC_APB1RSTR, 0x4000);
   a:	4b79      	ldr	r3, [pc, #484]	; (1f0 <surface_init+0x1f0>)
   c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  10:	6019      	str	r1, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:122
    poke(RCC_APB2RSTR, 0x0000);
  12:	f04f 0100 	mov.w	r1, #0
  16:	6011      	str	r1, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:123
    poke(RCC_APB1RSTR, 0x0000);
  18:	6019      	str	r1, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:128

    // DMA
    // ---

    poke_set(RCC_AHBENR, 1<<0); // Turn on clock to DMA
  1a:	f103 0304 	add.w	r3, r3, #4
  1e:	681a      	ldr	r2, [r3, #0]
  20:	f042 0201 	orr.w	r2, r2, #1
  24:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:131

    // SPI1 DMA CH2 SPI1_Rx
    poke(DMA1_CPAR2, SPI1_DR); // Peripheral address to SPI1 Data Register
  26:	4d73      	ldr	r5, [pc, #460]	; (1f4 <surface_init+0x1f4>)
  28:	f5a3 637f 	sub.w	r3, r3, #4080	; 0xff0
  2c:	601d      	str	r5, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:132
    pokep(DMA1_CMAR2, SwitchData); // Transfer to SwitchData array
  2e:	4c72      	ldr	r4, [pc, #456]	; (1f8 <surface_init+0x1f8>)
  30:	f103 0304 	add.w	r3, r3, #4
  34:	601c      	str	r4, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:133
    poke(DMA1_CNDTR2, NSWBYTES); // Sets number of switch bytes to transfer
  36:	f04f 0004 	mov.w	r0, #4
  3a:	f1a3 0308 	sub.w	r3, r3, #8
  3e:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:134
    poke(DMA1_CCR2, 0x2182); // high priority, 8 to 16 bit transfer, memory increment, read from preipheral, transfer complete interupt
  40:	4a6e      	ldr	r2, [pc, #440]	; (1fc <surface_init+0x1fc>)
  42:	f242 1382 	movw	r3, #8578	; 0x2182
  46:	6013      	str	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:135
    poke_set(NVIC_ISR, 1<<12); // Enable interupt 12
  48:	4b6d      	ldr	r3, [pc, #436]	; (200 <surface_init+0x200>)
  4a:	681e      	ldr	r6, [r3, #0]
  4c:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  50:	601e      	str	r6, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:136
    poke_set(DMA1_CCR2, 1<<0); // enable DMA
  52:	6816      	ldr	r6, [r2, #0]
  54:	f046 0601 	orr.w	r6, r6, #1
  58:	6016      	str	r6, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:139

    // SPI1 DMA CH3 SPI1_Tx
    poke(DMA1_CPAR3, SPI1_DR); // Peripheral address to SPI1 Data Register
  5a:	f102 021c 	add.w	r2, r2, #28
  5e:	6015      	str	r5, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:140
    pokep(DMA1_CMAR3, SwitchData); // Transfer from SwitchData array
  60:	f102 0204 	add.w	r2, r2, #4
  64:	6014      	str	r4, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:141
    poke(DMA1_CNDTR3, NSWBYTES); // Sets number of switch bytes to transfer
  66:	f1a2 0208 	sub.w	r2, r2, #8
  6a:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:142
    poke(DMA1_CCR3, 0x2192); // high priority, 8 to 16 bit transfer, memory increment, read from preipheral, transfer complete interupt
  6c:	f1a2 0204 	sub.w	r2, r2, #4
  70:	f242 1092 	movw	r0, #8594	; 0x2192
  74:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:143
    poke_set(NVIC_ISR, 1<<13); // Enable interupt 13
  76:	681c      	ldr	r4, [r3, #0]
  78:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  7c:	601c      	str	r4, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:144
    poke_set(DMA1_CCR3, 1<<0); // enable DMA
  7e:	6814      	ldr	r4, [r2, #0]
  80:	f044 0401 	orr.w	r4, r4, #1
  84:	6014      	str	r4, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:147

    // SPI2 DMA CH5 SPI2_Tx
    poke(DMA1_CPAR5, SPI2_DR); // Peripheral address to SPI2 Data Register
  86:	4c5f      	ldr	r4, [pc, #380]	; (204 <surface_init+0x204>)
  88:	f102 0230 	add.w	r2, r2, #48	; 0x30
  8c:	6014      	str	r4, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:148
    pokep(DMA1_CMAR5, LedData); // Transfer from LedData array
  8e:	f102 0204 	add.w	r2, r2, #4
  92:	4c5d      	ldr	r4, [pc, #372]	; (208 <surface_init+0x208>)
  94:	6014      	str	r4, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:149
    poke(DMA1_CNDTR5, NLEDBYTES); // Sets number of Led bytes
  96:	f04f 0407 	mov.w	r4, #7
  9a:	f1a2 0208 	sub.w	r2, r2, #8
  9e:	6014      	str	r4, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:150
    poke(DMA1_CCR5, 0x2192); // high priority, 8 to 16 bit transfer, memory increment, read from memory, transfer comp irq
  a0:	f1a2 0204 	sub.w	r2, r2, #4
  a4:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:151
    poke_set(NVIC_ISR, 1<<15); // Enable interupt 15
  a6:	6818      	ldr	r0, [r3, #0]
  a8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  ac:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:152
    poke_set(DMA1_CCR5, 1<<0); // enable DMA
  ae:	6813      	ldr	r3, [r2, #0]
  b0:	f043 0301 	orr.w	r3, r3, #1
  b4:	6013      	str	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:158

    // SPI
    // ---

    // SPI Initialisation
    poke_set(RCC_APB2ENR, 1<<12); // Turn on peripheral clock SPI1
  b6:	4b55      	ldr	r3, [pc, #340]	; (20c <surface_init+0x20c>)
  b8:	681a      	ldr	r2, [r3, #0]
  ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  be:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:159
    poke_set(RCC_APB1ENR, 1<<14); // Turn on peripheral clock SPI2
  c0:	4a53      	ldr	r2, [pc, #332]	; (210 <surface_init+0x210>)
  c2:	6813      	ldr	r3, [r2, #0]
  c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  c8:	6013      	str	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:164

    // don't enable SPI until everything is set up

    // SPI1 (Switches)
    poke (SPI1_CR1, 0x038E); // NSS software managed, NSS def to 1, PCLK/4 = 6MHz, clk idle low, clock active low
  ca:	4b52      	ldr	r3, [pc, #328]	; (214 <surface_init+0x214>)
  cc:	f240 308e 	movw	r0, #910	; 0x38e
  d0:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:165
    poke_set(SPI1_CR1, 1<<2); // master config
  d2:	6818      	ldr	r0, [r3, #0]
  d4:	f040 0004 	orr.w	r0, r0, #4
  d8:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:166
    poke(SPI1_CR2, 0x3); // enable Tx/Rx DMA requests
  da:	f04f 0403 	mov.w	r4, #3
  de:	484e      	ldr	r0, [pc, #312]	; (218 <surface_init+0x218>)
  e0:	6004      	str	r4, [r0, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:167
    poke_set(SPI1_CR1, 1<<6); // enable spi
  e2:	6818      	ldr	r0, [r3, #0]
  e4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  e8:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:170

    // SPI2 (LEDs)
    poke (SPI2_CR1, 0x38D); // NSS software managed, NSS def to 1, PCLK/4 = 6MHz, clk idle low, clock active low
  ea:	4b4c      	ldr	r3, [pc, #304]	; (21c <surface_init+0x21c>)
  ec:	f240 308d 	movw	r0, #909	; 0x38d
  f0:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:171
    poke_set(SPI2_CR1, 1<<2); // enable master config
  f2:	6818      	ldr	r0, [r3, #0]
  f4:	f040 0004 	orr.w	r0, r0, #4
  f8:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:172
    poke(SPI2_CR2, 0x2); // enable Tx DMA requests
  fa:	f04f 0402 	mov.w	r4, #2
  fe:	4848      	ldr	r0, [pc, #288]	; (220 <surface_init+0x220>)
 100:	6004      	str	r4, [r0, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:173
    poke_set(SPI2_CR1, 1<<6); // enable spi
 102:	6818      	ldr	r0, [r3, #0]
 104:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 108:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:179

    // Timers
    // ------

    // TIM2 Setup (LED Multiplexing)
    poke_set(RCC_APB1ENR, 1<<0); // turn on clock for TIM2
 10a:	6813      	ldr	r3, [r2, #0]
 10c:	f043 0301 	orr.w	r3, r3, #1
 110:	6013      	str	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:180
    poke(TIM2_CR1, 0x14); // only underflow generates interupt, downcounter
 112:	f04f 0214 	mov.w	r2, #20
 116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 11a:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:181
    poke(TIM2_DIER, 0x1); // generate interupt on finishing
 11c:	f04f 0201 	mov.w	r2, #1
 120:	f103 030c 	add.w	r3, r3, #12
 124:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:182
    poke(TIM2_SR, 0); // clear registers
 126:	f103 0304 	add.w	r3, r3, #4
 12a:	6019      	str	r1, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:183
    poke(TIM2_PSC, PREDIV-1); // time base of 1MHz with prediv = 24
 12c:	f04f 0217 	mov.w	r2, #23
 130:	f103 0318 	add.w	r3, r3, #24
 134:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:185

    if (!ForceFullBrightness)
 136:	4b3b      	ldr	r3, [pc, #236]	; (224 <surface_init+0x224>)
 138:	781b      	ldrb	r3, [r3, #0]
 13a:	b94b      	cbnz	r3, 150 <surface_init+0x150>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:187
    {
        poke(TIM2_CNT, TIMER_VALUE_LOWPOWER[0]); // time until first interupt
 13c:	f04f 02e6 	mov.w	r2, #230	; 0xe6
 140:	4b39      	ldr	r3, [pc, #228]	; (228 <surface_init+0x228>)
 142:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:188
        poke(TIM2_ARR, TIMER_VALUE_LOWPOWER[1]); // reload value for timer
 144:	f04f 020f 	mov.w	r2, #15
 148:	f103 0308 	add.w	r3, r3, #8
 14c:	601a      	str	r2, [r3, #0]
 14e:	e008      	b.n	162 <surface_init+0x162>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:192
    }
    else
    {
        poke(TIM2_CNT, TIMER_VALUE_FULLPOWER[0]); // time until first interupt
 150:	f04f 0216 	mov.w	r2, #22
 154:	4b34      	ldr	r3, [pc, #208]	; (228 <surface_init+0x228>)
 156:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:193
        poke(TIM2_ARR, TIMER_VALUE_FULLPOWER[1]); // reload value for timer
 158:	f04f 020f 	mov.w	r2, #15
 15c:	f103 0308 	add.w	r3, r3, #8
 160:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:196
    }

    poke_set(NVIC_ISR, 1<<28); // enable interupt 28 for TIM2
 162:	4b27      	ldr	r3, [pc, #156]	; (200 <surface_init+0x200>)
 164:	681a      	ldr	r2, [r3, #0]
 166:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 16a:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:197
    poke_set(NVIC_PRIORITY+0x0C,0x00000080); // lower the priority under time critical peripherals
 16c:	4a2f      	ldr	r2, [pc, #188]	; (22c <surface_init+0x22c>)
 16e:	6811      	ldr	r1, [r2, #0]
 170:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 174:	6011      	str	r1, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:199

    poke(TIM2_CR1, 0x15); // enable timer
 176:	f04f 0115 	mov.w	r1, #21
 17a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 17e:	6011      	str	r1, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:202

    //TIM3 Setup (Stable Timebase 1kHz)
    poke_set(RCC_APB1ENR, 1<<1); // turn on clock for TIM3
 180:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 184:	f102 021c 	add.w	r2, r2, #28
 188:	6810      	ldr	r0, [r2, #0]
 18a:	f040 0002 	orr.w	r0, r0, #2
 18e:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:203
    poke(TIM3_CR1, 0x14); // only underflow generates interupt, downcounter
 190:	4a27      	ldr	r2, [pc, #156]	; (230 <surface_init+0x230>)
 192:	f04f 0014 	mov.w	r0, #20
 196:	6010      	str	r0, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:204
    poke(TIM3_DIER, 0x1); // generate interupt on finishing
 198:	f04f 0401 	mov.w	r4, #1
 19c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 1a0:	f500 707e 	add.w	r0, r0, #1016	; 0x3f8
 1a4:	6004      	str	r4, [r0, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:205
    poke(TIM3_SR, 0); // clear registers
 1a6:	f04f 0400 	mov.w	r4, #0
 1aa:	f100 0004 	add.w	r0, r0, #4
 1ae:	6004      	str	r4, [r0, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:206
    poke(TIM3_PSC, PREDIV-1); // time base of 1MHz with prediv = 24
 1b0:	f04f 0417 	mov.w	r4, #23
 1b4:	f100 0018 	add.w	r0, r0, #24
 1b8:	6004      	str	r4, [r0, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:207
    poke(TIM3_CNT, POSTDIV-1); // time until first interupt
 1ba:	f240 30e7 	movw	r0, #999	; 0x3e7
 1be:	4c1d      	ldr	r4, [pc, #116]	; (234 <surface_init+0x234>)
 1c0:	6020      	str	r0, [r4, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:208
    poke(TIM3_ARR, POSTDIV-1); // reload value for timer
 1c2:	f104 0408 	add.w	r4, r4, #8
 1c6:	6020      	str	r0, [r4, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:210

    poke_set(NVIC_ISR, 1<<29); // enable interupt 29 for TIM3
 1c8:	6818      	ldr	r0, [r3, #0]
 1ca:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 1ce:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:211
    poke_set(NVIC_PRIORITY+0x1C,0x00006000); // lower the priority under time critical peripherals
 1d0:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 1d4:	6818      	ldr	r0, [r3, #0]
 1d6:	f440 40c0 	orr.w	r0, r0, #24576	; 0x6000
 1da:	6018      	str	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:213

    poke(TIM3_CR1, 0x15); // enable timer
 1dc:	6011      	str	r1, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:218

    // Finally
    // -------

    poke(GPIOA_BSRR, SW_SHIFT<<16); // enable loading for switches
 1de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 1e2:	4b15      	ldr	r3, [pc, #84]	; (238 <surface_init+0x238>)
 1e4:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:219
}
 1e6:	bc70      	pop	{r4, r5, r6}
 1e8:	4770      	bx	lr
 1ea:	bf00      	nop
 1ec:	4002100c 	.word	0x4002100c
 1f0:	40021010 	.word	0x40021010
 1f4:	4001300c 	.word	0x4001300c
 1f8:	00000000 	.word	0x00000000
 1fc:	4002001c 	.word	0x4002001c
 200:	e000e100 	.word	0xe000e100
 204:	4000380c 	.word	0x4000380c
 208:	00000000 	.word	0x00000000
 20c:	40021018 	.word	0x40021018
 210:	4002101c 	.word	0x4002101c
 214:	40013000 	.word	0x40013000
 218:	40013004 	.word	0x40013004
 21c:	40003800 	.word	0x40003800
 220:	40003804 	.word	0x40003804
 224:	00000000 	.word	0x00000000
 228:	40000024 	.word	0x40000024
 22c:	e000e40c 	.word	0xe000e40c
 230:	40000400 	.word	0x40000400
 234:	40000424 	.word	0x40000424
 238:	40010810 	.word	0x40010810

Disassembly of section .text.DMA1_Channel2_IRQHandler:

00000000 <DMA1_Channel2_IRQHandler>:
DMA1_Channel2_IRQHandler():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:230
//

void DMA1_Channel2_IRQHandler()
{
    // Switch data received
    poke_set(DMA1_IFCR, 1<<5); // clear interupt
   0:	681a4b08 	.word	0x681a4b08
   4:	f042 0220 	orr.w	r2, r2, #32
   8:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:231
    poke_clr(DMA1_CCR2, 1<<0); // disable DMA
   a:	f103 0318 	add.w	r3, r3, #24
   e:	681a      	ldr	r2, [r3, #0]
  10:	f022 0201 	bic.w	r2, r2, #1
  14:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:232
    poke(DMA1_CNDTR2, NSWBYTES); // reload switch bytes
  16:	f04f 0204 	mov.w	r2, #4
  1a:	f103 0304 	add.w	r3, r3, #4
  1e:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:233
}
  20:	4770      	bx	lr
  22:	bf00      	nop
  24:	40020004 	.word	0x40020004

Disassembly of section .text.DMA1_Channel3_IRQHandler:

00000000 <DMA1_Channel3_IRQHandler>:
DMA1_Channel3_IRQHandler():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:241
//

void DMA1_Channel3_IRQHandler()
{
    // Dummy switch data transmitted
    poke_set(DMA1_IFCR, 1<<9); // clear interupt
   0:	4b08      	ldr	r3, [pc, #32]	; (24 <DMA1_Channel3_IRQHandler+0x24>)
   2:	681a      	ldr	r2, [r3, #0]
   4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:242
    poke_clr(DMA1_CCR3, 1<<0); // disable DMA
   a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   e:	681a      	ldr	r2, [r3, #0]
  10:	f022 0201 	bic.w	r2, r2, #1
  14:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:243
    poke(DMA1_CNDTR3, NSWBYTES); // reload switch bytes
  16:	f04f 0204 	mov.w	r2, #4
  1a:	f103 0304 	add.w	r3, r3, #4
  1e:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:244
}
  20:	4770      	bx	lr
  22:	bf00      	nop
  24:	40020004 	.word	0x40020004

Disassembly of section .text.DMA1_Channel5_IRQHandler:

00000000 <DMA1_Channel5_IRQHandler>:
DMA1_Channel5_IRQHandler():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:252
//

void DMA1_Channel5_IRQHandler()
{
    // LED data transmitted
    poke_set(DMA1_IFCR, 1<<17); // clear interupt
   0:	4b08      	ldr	r3, [pc, #32]	; (24 <DMA1_Channel5_IRQHandler+0x24>)
   2:	681a      	ldr	r2, [r3, #0]
   4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   8:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:253
    poke_clr(DMA1_CCR5, 1<<0); // disable DMA
   a:	f103 0354 	add.w	r3, r3, #84	; 0x54
   e:	681a      	ldr	r2, [r3, #0]
  10:	f022 0201 	bic.w	r2, r2, #1
  14:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:254
    poke(DMA1_CNDTR5, NLEDBYTES); // reload LED Bytes
  16:	f04f 0207 	mov.w	r2, #7
  1a:	f103 0304 	add.w	r3, r3, #4
  1e:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:255
}
  20:	4770      	bx	lr
  22:	bf00      	nop
  24:	40020004 	.word	0x40020004

Disassembly of section .text.TIM2_IRQHandler:

00000000 <TIM2_IRQHandler>:
TIM2_IRQHandler():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:261

// ____________________________________________________________________________
//

void TIM2_IRQHandler()
{
   0:	b510      	push	{r4, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:262
    TIMER_JUMP[Mode](); // call surface function
   2:	4c21      	ldr	r4, [pc, #132]	; (88 <TIM2_IRQHandler+0x88>)
   4:	7822      	ldrb	r2, [r4, #0]
   6:	4b21      	ldr	r3, [pc, #132]	; (8c <TIM2_IRQHandler+0x8c>)
   8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   e:	4798      	blx	r3
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:263
    Mode++;
  10:	7823      	ldrb	r3, [r4, #0]
  12:	f103 0301 	add.w	r3, r3, #1
  16:	b2db      	uxtb	r3, r3
  18:	7023      	strb	r3, [r4, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:264
    if (Mode == NMODES)
  1a:	2b05      	cmp	r3, #5
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:266
    {
        Mode = 0;
  1c:	bf04      	itt	eq
  1e:	2200      	moveq	r2, #0
  20:	7022      	strbeq	r2, [r4, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:269
    }

    poke(TIM2_SR, 0); // reset staus register for timer
  22:	f04f 0200 	mov.w	r2, #0
  26:	4b1a      	ldr	r3, [pc, #104]	; (90 <TIM2_IRQHandler+0x90>)
  28:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:271

    if (!ForceFullBrightness)
  2a:	4b1a      	ldr	r3, [pc, #104]	; (94 <TIM2_IRQHandler+0x94>)
  2c:	781b      	ldrb	r3, [r3, #0]
  2e:	b9ab      	cbnz	r3, 5c <TIM2_IRQHandler+0x5c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:274
    {

        if (Mode == 2)
  30:	4b15      	ldr	r3, [pc, #84]	; (88 <TIM2_IRQHandler+0x88>)
  32:	781b      	ldrb	r3, [r3, #0]
  34:	2b02      	cmp	r3, #2
  36:	d10a      	bne.n	4e <TIM2_IRQHandler+0x4e>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:276
        {
            poke(TIM2_ARR, BRIGHT_TIMES[BrightBit][2]); // reload correct bright value for current bright bit
  38:	4b17      	ldr	r3, [pc, #92]	; (98 <TIM2_IRQHandler+0x98>)
  3a:	781b      	ldrb	r3, [r3, #0]
  3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40:	4a12      	ldr	r2, [pc, #72]	; (8c <TIM2_IRQHandler+0x8c>)
  42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  46:	8a1a      	ldrh	r2, [r3, #16]
  48:	4b14      	ldr	r3, [pc, #80]	; (9c <TIM2_IRQHandler+0x9c>)
  4a:	601a      	str	r2, [r3, #0]
  4c:	bd10      	pop	{r4, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:280
        }
        else
        {
            poke(TIM2_ARR, TIMER_VALUE_LOWPOWER[Mode]); // reload with the next timer value
  4e:	4a0f      	ldr	r2, [pc, #60]	; (8c <TIM2_IRQHandler+0x8c>)
  50:	18d3      	adds	r3, r2, r3
  52:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
  56:	4b11      	ldr	r3, [pc, #68]	; (9c <TIM2_IRQHandler+0x9c>)
  58:	601a      	str	r2, [r3, #0]
  5a:	bd10      	pop	{r4, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:285
        }
    }
    else
    {
        if (Mode == 2)
  5c:	4b0a      	ldr	r3, [pc, #40]	; (88 <TIM2_IRQHandler+0x88>)
  5e:	781b      	ldrb	r3, [r3, #0]
  60:	2b02      	cmp	r3, #2
  62:	d10a      	bne.n	7a <TIM2_IRQHandler+0x7a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:287
        {
            poke(TIM2_ARR, BRIGHT_TIMES[BrightBit][1]); // reload correct bright value for current bright bit
  64:	4b0c      	ldr	r3, [pc, #48]	; (98 <TIM2_IRQHandler+0x98>)
  66:	781b      	ldrb	r3, [r3, #0]
  68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  6c:	4a07      	ldr	r2, [pc, #28]	; (8c <TIM2_IRQHandler+0x8c>)
  6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  72:	89da      	ldrh	r2, [r3, #14]
  74:	4b09      	ldr	r3, [pc, #36]	; (9c <TIM2_IRQHandler+0x9c>)
  76:	601a      	str	r2, [r3, #0]
  78:	bd10      	pop	{r4, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:291
        }
        else
        {
            poke(TIM2_ARR, TIMER_VALUE_FULLPOWER[Mode]); // reload with the next timer value
  7a:	4a04      	ldr	r2, [pc, #16]	; (8c <TIM2_IRQHandler+0x8c>)
  7c:	18d3      	adds	r3, r2, r3
  7e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
  82:	4b06      	ldr	r3, [pc, #24]	; (9c <TIM2_IRQHandler+0x9c>)
  84:	601a      	str	r2, [r3, #0]
  86:	bd10      	pop	{r4, pc}
	...
  90:	40000010 	.word	0x40000010
	...
  9c:	4000002c 	.word	0x4000002c

Disassembly of section .text.ResetTextTimer:

00000000 <ResetTextTimer>:
ResetTextTimer():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:354
// ____________________________________________________________________________
//

void ResetTextTimer()
{
	TextTimer = TEXT_TIMER[TextSpeed];
   0:	781a4b03 	.word	0x781a4b03
   4:	4b03      	ldr	r3, [pc, #12]	; (14 <ResetTextTimer+0x14>)
   6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   a:	4b03      	ldr	r3, [pc, #12]	; (18 <ResetTextTimer+0x18>)
   c:	601a      	str	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:355
}
   e:	4770      	bx	lr
	...

Disassembly of section .text.TIM3_IRQHandler:

00000000 <TIM3_IRQHandler>:
TIM3_IRQHandler():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:300

// ____________________________________________________________________________
//

void TIM3_IRQHandler()
{
   0:	b510      	push	{r4, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:301
    poke(TIM3_SR, 0); // reset status register for timer
   2:	f04f 0300 	mov.w	r3, #0
   6:	4a28      	ldr	r2, [pc, #160]	; (a8 <TIM3_IRQHandler+0xa8>)
   8:	6013      	str	r3, [r2, #0]
   a:	4a28      	ldr	r2, [pc, #160]	; (ac <TIM3_IRQHandler+0xac>)
   c:	7810      	ldrb	r0, [r2, #0]
   e:	4a28      	ldr	r2, [pc, #160]	; (b0 <TIM3_IRQHandler+0xb0>)
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:312
    {
        if (hz_value[i])
        {
            if (!--hz_value[i])
            {
                hz_value[i] = HZ_RESET[i];
  10:	4c28      	ldr	r4, [pc, #160]	; (b4 <TIM3_IRQHandler+0xb4>)
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:308
    // regular events
    // --------------

    for (u8 i=0; i<NHZ; i++)
    {
        if (hz_value[i])
  12:	f812 1b01 	ldrb.w	r1, [r2], #1
  16:	b171      	cbz	r1, 36 <TIM3_IRQHandler+0x36>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:310
        {
            if (!--hz_value[i])
  18:	f101 31ff 	add.w	r1, r1, #4294967295
  1c:	b2c9      	uxtb	r1, r1
  1e:	f802 1c01 	strb.w	r1, [r2, #-1]
  22:	b941      	cbnz	r1, 36 <TIM3_IRQHandler+0x36>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:312
            {
                hz_value[i] = HZ_RESET[i];
  24:	f104 015c 	add.w	r1, r4, #92	; 0x5c
  28:	5cc9      	ldrb	r1, [r1, r3]
  2a:	f802 1c01 	strb.w	r1, [r2, #-1]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:313
                EventFlags |= ORMASK[i];
  2e:	f104 0154 	add.w	r1, r4, #84	; 0x54
  32:	5cc9      	ldrb	r1, [r1, r3]
  34:	4308      	orrs	r0, r1
  36:	f103 0301 	add.w	r3, r3, #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:306
    poke(TIM3_SR, 0); // reset status register for timer

    // regular events
    // --------------

    for (u8 i=0; i<NHZ; i++)
  3a:	2b03      	cmp	r3, #3
  3c:	d1e9      	bne.n	12 <TIM3_IRQHandler+0x12>
  3e:	4b1b      	ldr	r3, [pc, #108]	; (ac <TIM3_IRQHandler+0xac>)
  40:	7018      	strb	r0, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:321
    }

    // other events of pre-programmed frequency
    // ----------------------------------------

    if (FlashTimer)
  42:	4b1d      	ldr	r3, [pc, #116]	; (b8 <TIM3_IRQHandler+0xb8>)
  44:	689b      	ldr	r3, [r3, #8]
  46:	b16b      	cbz	r3, 64 <TIM3_IRQHandler+0x64>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:323
    {
        if (!--FlashTimer)
  48:	f103 33ff 	add.w	r3, r3, #4294967295
  4c:	4a1a      	ldr	r2, [pc, #104]	; (b8 <TIM3_IRQHandler+0xb8>)
  4e:	6093      	str	r3, [r2, #8]
  50:	b943      	cbnz	r3, 64 <TIM3_IRQHandler+0x64>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:325
        {
            FlashTimer = FLASH_TIMER;
  52:	f44f 7290 	mov.w	r2, #288	; 0x120
  56:	4b18      	ldr	r3, [pc, #96]	; (b8 <TIM3_IRQHandler+0xb8>)
  58:	609a      	str	r2, [r3, #8]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:326
            EventFlags |= EVENT_FLASH;
  5a:	4b14      	ldr	r3, [pc, #80]	; (ac <TIM3_IRQHandler+0xac>)
  5c:	b2c2      	uxtb	r2, r0
  5e:	f042 0208 	orr.w	r2, r2, #8
  62:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:330
        }
    }

    if (TextTimer)
  64:	4b14      	ldr	r3, [pc, #80]	; (b8 <TIM3_IRQHandler+0xb8>)
  66:	681b      	ldr	r3, [r3, #0]
  68:	b15b      	cbz	r3, 82 <TIM3_IRQHandler+0x82>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:332
    {
        if (!--TextTimer)
  6a:	f103 33ff 	add.w	r3, r3, #4294967295
  6e:	4a12      	ldr	r2, [pc, #72]	; (b8 <TIM3_IRQHandler+0xb8>)
  70:	6013      	str	r3, [r2, #0]
  72:	b933      	cbnz	r3, 82 <TIM3_IRQHandler+0x82>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:334
        {
			ResetTextTimer();
  74:	f7ff fffe 	bl	0 <TIM3_IRQHandler>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:335
            EventFlags |= EVENT_TEXT_SCROLL;
  78:	4b0c      	ldr	r3, [pc, #48]	; (ac <TIM3_IRQHandler+0xac>)
  7a:	781a      	ldrb	r2, [r3, #0]
  7c:	f042 0210 	orr.w	r2, r2, #16
  80:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:339
        }
    }

    if (VegasTimer)
  82:	4b0d      	ldr	r3, [pc, #52]	; (b8 <TIM3_IRQHandler+0xb8>)
  84:	68db      	ldr	r3, [r3, #12]
  86:	b16b      	cbz	r3, a4 <TIM3_IRQHandler+0xa4>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:341
    {
        if (!--VegasTimer)
  88:	f103 33ff 	add.w	r3, r3, #4294967295
  8c:	4a0a      	ldr	r2, [pc, #40]	; (b8 <TIM3_IRQHandler+0xb8>)
  8e:	60d3      	str	r3, [r2, #12]
  90:	b943      	cbnz	r3, a4 <TIM3_IRQHandler+0xa4>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:343
        {
            VegasTimer = VEGAS_TIMER;
  92:	f04f 0290 	mov.w	r2, #144	; 0x90
  96:	4b08      	ldr	r3, [pc, #32]	; (b8 <TIM3_IRQHandler+0xb8>)
  98:	60da      	str	r2, [r3, #12]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:344
            EventFlags |= EVENT_VEGAS;
  9a:	4b04      	ldr	r3, [pc, #16]	; (ac <TIM3_IRQHandler+0xac>)
  9c:	781a      	ldrb	r2, [r3, #0]
  9e:	f042 0220 	orr.w	r2, r2, #32
  a2:	701a      	strb	r2, [r3, #0]
  a4:	bd10      	pop	{r4, pc}
  a6:	bf00      	nop
  a8:	40000410 	.word	0x40000410
  ac:	00000000 	.word	0x00000000
  b0:	00000004 	.word	0x00000004
	...

Disassembly of section .text.EngageVegas:

00000000 <EngageVegas>:
EngageVegas():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:361

// ____________________________________________________________________________
//

void EngageVegas()
{
   0:	f7ffb508 	.word	0xf7ffb508
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:362
    Vegas_Reset();
   4:	fffe f04f 	vmla.i<illegal width 64>	<illegal reg q15.5>, q7, d15[0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:363
    VegasActive = TRUE;
   8:	0201      	lsls	r1, r0, #8
   a:	4b06      	ldr	r3, [pc, #24]	; (24 <EngageVegas+0x24>)
   c:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:364
    if (DisplayBank != VEGAS_BANK)
   e:	4b06      	ldr	r3, [pc, #24]	; (28 <EngageVegas+0x28>)
  10:	781b      	ldrb	r3, [r3, #0]
  12:	2b02      	cmp	r3, #2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:366
    {
        PrevDispBank = DisplayBank;
  14:	bf1c      	itt	ne
  16:	4a05      	ldrne	r2, [pc, #20]	; (2c <EngageVegas+0x2c>)
  18:	7013      	strbne	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:368
    }
    DisplayBank = VEGAS_BANK;
  1a:	f04f 0202 	mov.w	r2, #2
  1e:	4b02      	ldr	r3, [pc, #8]	; (28 <EngageVegas+0x28>)
  20:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:369
}
  22:	bd08      	pop	{r3, pc}
	...

Disassembly of section .text.EngageText:

00000000 <EngageText>:
EngageText():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:375

// ____________________________________________________________________________
//

void EngageText()
{
   0:	b508      	push	{r3, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:377
    // called when scrolling starts
    Scroll_Reset();
   2:	f7ff fffe 	bl	0 <Scroll_Reset>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:378
    TextActive = TRUE;
   6:	f04f 0201 	mov.w	r2, #1
   a:	4b06      	ldr	r3, [pc, #24]	; (24 <EngageText+0x24>)
   c:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:379
    if (DisplayBank != VEGAS_BANK)
   e:	4b06      	ldr	r3, [pc, #24]	; (28 <EngageText+0x28>)
  10:	781b      	ldrb	r3, [r3, #0]
  12:	2b02      	cmp	r3, #2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:381
    {
        PrevDispBank = DisplayBank;
  14:	bf1c      	itt	ne
  16:	4a05      	ldrne	r2, [pc, #20]	; (2c <EngageText+0x2c>)
  18:	7013      	strbne	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:383
    }
    DisplayBank = VEGAS_BANK;
  1a:	f04f 0202 	mov.w	r2, #2
  1e:	4b02      	ldr	r3, [pc, #8]	; (28 <EngageText+0x28>)
  20:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:384
}
  22:	bd08      	pop	{r3, pc}
	...

Disassembly of section .text.DisengageVegasAndText:

00000000 <DisengageVegasAndText>:
DisengageVegasAndText():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:391
// ____________________________________________________________________________
//

void DisengageVegasAndText()
{
    DisplayBank = PrevDispBank; // return to previous display bank on leaving vegas
   0:	4b05      	ldr	r3, [pc, #20]	; (18 <DisengageVegasAndText+0x18>)
   2:	781a      	ldrb	r2, [r3, #0]
   4:	4b05      	ldr	r3, [pc, #20]	; (1c <DisengageVegasAndText+0x1c>)
   6:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:393
    // turn off markers
	VegasActive = FALSE;
   8:	f04f 0300 	mov.w	r3, #0
   c:	4a04      	ldr	r2, [pc, #16]	; (20 <DisengageVegasAndText+0x20>)
   e:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:394
	TextActive = FALSE;
  10:	4a04      	ldr	r2, [pc, #16]	; (24 <DisengageVegasAndText+0x24>)
  12:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:395
}
  14:	4770      	bx	lr
  16:	bf00      	nop
	...

Disassembly of section .text.USBUnconfigured:

00000000 <USBUnconfigured>:
USBUnconfigured():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:405
// ____________________________________________________________________________
//

void USBUnconfigured()
{
    SurfaceOn = FALSE; // turn off surface
   0:	f04f 0200 	mov.w	r2, #0
   4:	4b01      	ldr	r3, [pc, #4]	; (c <USBUnconfigured+0xc>)
   6:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:406
}
   8:	4770      	bx	lr
   a:	bf00      	nop
   c:	00000000 	.word	0x00000000

Disassembly of section .text.USBConfigured:

00000000 <USBConfigured>:
USBConfigured():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:412

// ____________________________________________________________________________
//

void USBConfigured(u8 standalone)
{
   0:	b508      	push	{r3, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:413
    SurfaceOn = TRUE;
   2:	f04f 0201 	mov.w	r2, #1
   6:	4b04      	ldr	r3, [pc, #16]	; (18 <USBConfigured+0x18>)
   8:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:415

    if (standalone)
   a:	b110      	cbz	r0, 12 <USBConfigured+0x12>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:417
    {
        EngageVegas();
   c:	f7ff fffe 	bl	0 <USBConfigured>
  10:	bd08      	pop	{r3, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:421
    }
    else
    {
        DisengageVegasAndText();
  12:	f7ff fffe 	bl	0 <USBConfigured>
  16:	bd08      	pop	{r3, pc}
  18:	00000000 	.word	0x00000000

Disassembly of section .text.Plot:

00000000 <Plot>:
Plot():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:483

// ____________________________________________________________________________
//

void Plot(u8 Position, u16 Colour, u8 Bank, u8 mode)
{
   0:	b4f0      	push	{r4, r5, r6, r7}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:488
	u8 table_pos;
    

    // set a bicolour LED
    if (Position < INV)
   2:	284f      	cmp	r0, #79	; 0x4f
   4:	d85a      	bhi.n	bc <Plot+0xbc>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:490
    {
        if (!mode)
   6:	2b00      	cmp	r3, #0
   8:	d12f      	bne.n	6a <Plot+0x6a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:492
        {
            Colour &= 0x33; // clear any non-colour-related bits
   a:	f001 0133 	and.w	r1, r1, #51	; 0x33
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:495
            // turn the colour value into an offset in the intensity table.
            // 0x33 -> 15 etc. (see the table itself in surfacemap.h for the codes)
            table_pos  = Colour + (Colour >> 2);
   e:	eb01 0191 	add.w	r1, r1, r1, lsr #2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:498
            table_pos &= 0x0f;

            led_set((RED_MAP[Position]), RED_BRIGHTNESS_1122[table_pos], Bank);
  12:	f001 010f 	and.w	r1, r1, #15
  16:	4b2a      	ldr	r3, [pc, #168]	; (c0 <Plot+0xc0>)
  18:	5c5d      	ldrb	r5, [r3, r1]
  1a:	4b2a      	ldr	r3, [pc, #168]	; (c4 <Plot+0xc4>)
led_set():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:472

inline void led_set(u8 address, u8 brightness, u8 bank)
{
    u16 newbrightness;

    LedMasterValue[bank][address] = brightness; // store brightness value unchanged by duty cycle
  1c:	5c1b      	ldrb	r3, [r3, r0]
  1e:	f04f 04a8 	mov.w	r4, #168	; 0xa8
  22:	fb04 3402 	mla	r4, r4, r2, r3
  26:	4e28      	ldr	r6, [pc, #160]	; (c8 <Plot+0xc8>)
  28:	5535      	strb	r5, [r6, r4]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:474

    newbrightness = (brightness * DutyCycleMultiplier) / 16; // calculate new brightness value from current duty cycle
  2a:	4c28      	ldr	r4, [pc, #160]	; (cc <Plot+0xcc>)
  2c:	7824      	ldrb	r4, [r4, #0]
  2e:	fb04 f705 	mul.w	r7, r4, r5
  32:	ea4f 1717 	mov.w	r7, r7, lsr #4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:476
    if (newbrightness > 0x3F) newbrightness = 0x3F; // stop it going over max value.
    LedValue[bank][address] = newbrightness; // store new brightness value for surface
  36:	f04f 05a8 	mov.w	r5, #168	; 0xa8
  3a:	fb05 f502 	mul.w	r5, r5, r2
  3e:	18eb      	adds	r3, r5, r3
  40:	2f3f      	cmp	r7, #63	; 0x3f
  42:	bf28      	it	cs
  44:	273f      	movcs	r7, #63	; 0x3f
  46:	4e22      	ldr	r6, [pc, #136]	; (d0 <Plot+0xd0>)
  48:	54f7      	strb	r7, [r6, r3]
Plot():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:499
            // 0x33 -> 15 etc. (see the table itself in surfacemap.h for the codes)
            table_pos  = Colour + (Colour >> 2);
            table_pos &= 0x0f;

            led_set((RED_MAP[Position]), RED_BRIGHTNESS_1122[table_pos], Bank);
            led_set((GRN_MAP[Position]), GRN_BRIGHTNESS_1122[table_pos], Bank);
  4a:	4b22      	ldr	r3, [pc, #136]	; (d4 <Plot+0xd4>)
  4c:	5c59      	ldrb	r1, [r3, r1]
  4e:	4b22      	ldr	r3, [pc, #136]	; (d8 <Plot+0xd8>)
led_set():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:472

inline void led_set(u8 address, u8 brightness, u8 bank)
{
    u16 newbrightness;

    LedMasterValue[bank][address] = brightness; // store brightness value unchanged by duty cycle
  50:	5c1b      	ldrb	r3, [r3, r0]
  52:	18ed      	adds	r5, r5, r3
  54:	481c      	ldr	r0, [pc, #112]	; (c8 <Plot+0xc8>)
  56:	5541      	strb	r1, [r0, r5]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:474

    newbrightness = (brightness * DutyCycleMultiplier) / 16; // calculate new brightness value from current duty cycle
  58:	fb04 f101 	mul.w	r1, r4, r1
  5c:	ea4f 1111 	mov.w	r1, r1, lsr #4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:476
    if (newbrightness > 0x3F) newbrightness = 0x3F; // stop it going over max value.
    LedValue[bank][address] = newbrightness; // store new brightness value for surface
  60:	293f      	cmp	r1, #63	; 0x3f
  62:	bf28      	it	cs
  64:	213f      	movcs	r1, #63	; 0x3f
  66:	5571      	strb	r1, [r6, r5]
  68:	e028      	b.n	bc <Plot+0xbc>
Plot():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:505
        }
        else 
        {
            u8 redvalue, greenvalue;
        
            redvalue = Colour & 0x3F;
  6a:	f001 053f 	and.w	r5, r1, #63	; 0x3f
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:506
            greenvalue = (Colour>>6) & 0x3F;
  6e:	f3c1 1185 	ubfx	r1, r1, #6, #6
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:508
        
            led_set((RED_MAP[Position]), redvalue, Bank);
  72:	4b14      	ldr	r3, [pc, #80]	; (c4 <Plot+0xc4>)
led_set():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:472

inline void led_set(u8 address, u8 brightness, u8 bank)
{
    u16 newbrightness;

    LedMasterValue[bank][address] = brightness; // store brightness value unchanged by duty cycle
  74:	5c1b      	ldrb	r3, [r3, r0]
  76:	f04f 04a8 	mov.w	r4, #168	; 0xa8
  7a:	fb04 3402 	mla	r4, r4, r2, r3
  7e:	4e12      	ldr	r6, [pc, #72]	; (c8 <Plot+0xc8>)
  80:	5535      	strb	r5, [r6, r4]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:474

    newbrightness = (brightness * DutyCycleMultiplier) / 16; // calculate new brightness value from current duty cycle
  82:	4c12      	ldr	r4, [pc, #72]	; (cc <Plot+0xcc>)
  84:	7824      	ldrb	r4, [r4, #0]
  86:	fb04 f705 	mul.w	r7, r4, r5
  8a:	ea4f 1717 	mov.w	r7, r7, lsr #4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:476
    if (newbrightness > 0x3F) newbrightness = 0x3F; // stop it going over max value.
    LedValue[bank][address] = newbrightness; // store new brightness value for surface
  8e:	f04f 05a8 	mov.w	r5, #168	; 0xa8
  92:	fb05 f502 	mul.w	r5, r5, r2
  96:	18eb      	adds	r3, r5, r3
  98:	2f3f      	cmp	r7, #63	; 0x3f
  9a:	bf28      	it	cs
  9c:	273f      	movcs	r7, #63	; 0x3f
  9e:	4e0c      	ldr	r6, [pc, #48]	; (d0 <Plot+0xd0>)
  a0:	54f7      	strb	r7, [r6, r3]
Plot():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:509
        
            redvalue = Colour & 0x3F;
            greenvalue = (Colour>>6) & 0x3F;
        
            led_set((RED_MAP[Position]), redvalue, Bank);
            led_set((GRN_MAP[Position]), greenvalue, Bank);
  a2:	4b0d      	ldr	r3, [pc, #52]	; (d8 <Plot+0xd8>)
led_set():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:472

inline void led_set(u8 address, u8 brightness, u8 bank)
{
    u16 newbrightness;

    LedMasterValue[bank][address] = brightness; // store brightness value unchanged by duty cycle
  a4:	5c1b      	ldrb	r3, [r3, r0]
  a6:	18ed      	adds	r5, r5, r3
  a8:	4807      	ldr	r0, [pc, #28]	; (c8 <Plot+0xc8>)
  aa:	5541      	strb	r1, [r0, r5]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:474

    newbrightness = (brightness * DutyCycleMultiplier) / 16; // calculate new brightness value from current duty cycle
  ac:	fb04 f101 	mul.w	r1, r4, r1
  b0:	ea4f 1111 	mov.w	r1, r1, lsr #4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:476
    if (newbrightness > 0x3F) newbrightness = 0x3F; // stop it going over max value.
    LedValue[bank][address] = newbrightness; // store new brightness value for surface
  b4:	293f      	cmp	r1, #63	; 0x3f
  b6:	bf28      	it	cs
  b8:	213f      	movcs	r1, #63	; 0x3f
  ba:	5571      	strb	r1, [r6, r5]
Plot():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:513
            led_set((RED_MAP[Position]), redvalue, Bank);
            led_set((GRN_MAP[Position]), greenvalue, Bank);
        }

    }
}
  bc:	bcf0      	pop	{r4, r5, r6, r7}
  be:	4770      	bx	lr
	...

Disassembly of section .text.Surface7bitLED:

00000000 <Surface7bitLED>:
Surface7bitLED():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:433
// LED set/clear
// ____________________________________________________________________________
//

void Surface7bitLED(u8* data, u16 count)
{
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:437
    u8 i=6,j=0, position=0, redvalue=0, greenvalue=0; 
    u16 colour=0;

    if (data[5] == 0x00) // we're updating single leds
   6:	7943      	ldrb	r3, [r0, #5]
   8:	bb23      	cbnz	r3, 54 <Surface7bitLED+0x54>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:439
    {
        while (data[i] != 0xF7) // look for end of sysex
   a:	7980      	ldrb	r0, [r0, #6]
   c:	28f7      	cmp	r0, #247	; 0xf7
   e:	d041      	beq.n	94 <Surface7bitLED+0x94>
  10:	f04f 0406 	mov.w	r4, #6
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:447
            redvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
            greenvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
        
            colour = (greenvalue<<6)+redvalue;
        
            Plot(position, colour, 0, PRECISION);
  14:	f04f 0600 	mov.w	r6, #0
  18:	f04f 0701 	mov.w	r7, #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:441

    if (data[5] == 0x00) // we're updating single leds
    {
        while (data[i] != 0xF7) // look for end of sysex
        {
            position = CalculateXY(data[i++]);
  1c:	f7ff fffe 	bl	0 <CalculateXY>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:442
            redvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
  20:	f104 0301 	add.w	r3, r4, #1
  24:	b2db      	uxtb	r3, r3
  26:	5ce9      	ldrb	r1, [r5, r3]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:443
            greenvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
  28:	f104 0302 	add.w	r3, r4, #2
  2c:	b2db      	uxtb	r3, r3
  2e:	5ceb      	ldrb	r3, [r5, r3]
  30:	ea4f 0393 	mov.w	r3, r3, lsr #2
  34:	f104 0403 	add.w	r4, r4, #3
  38:	b2e4      	uxtb	r4, r4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:445
        
            colour = (greenvalue<<6)+redvalue;
  3a:	ea4f 1383 	mov.w	r3, r3, lsl #6
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:447
        
            Plot(position, colour, 0, PRECISION);
  3e:	eb03 0191 	add.w	r1, r3, r1, lsr #2
  42:	4632      	mov	r2, r6
  44:	463b      	mov	r3, r7
  46:	f7ff fffe 	bl	0 <Surface7bitLED>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:439
    u8 i=6,j=0, position=0, redvalue=0, greenvalue=0; 
    u16 colour=0;

    if (data[5] == 0x00) // we're updating single leds
    {
        while (data[i] != 0xF7) // look for end of sysex
  4a:	5d28      	ldrb	r0, [r5, r4]
  4c:	28f7      	cmp	r0, #247	; 0xf7
  4e:	d1e5      	bne.n	1c <Surface7bitLED+0x1c>
  50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:450
            colour = (greenvalue<<6)+redvalue;
        
            Plot(position, colour, 0, PRECISION);
        }
    }
    else if (data[5] == 0x01) // we're doing a running update of the complete surface
  54:	2b01      	cmp	r3, #1
  56:	d11d      	bne.n	94 <Surface7bitLED+0x94>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:452
    {
        while((data[i] != 0xF7) && (j<80))
  58:	7983      	ldrb	r3, [r0, #6]
  5a:	2bf7      	cmp	r3, #247	; 0xf7
  5c:	d01a      	beq.n	94 <Surface7bitLED+0x94>
  5e:	4c0e      	ldr	r4, [pc, #56]	; (98 <Surface7bitLED+0x98>)
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:432
//
// LED set/clear
// ____________________________________________________________________________
//

void Surface7bitLED(u8* data, u16 count)
  60:	f104 0850 	add.w	r8, r4, #80	; 0x50
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:460
            redvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
            greenvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
        
            colour = (greenvalue<<6)+redvalue;
        
            Plot(position, colour, 0, PRECISION);
  64:	f04f 0600 	mov.w	r6, #0
  68:	f04f 0701 	mov.w	r7, #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:456
    {
        while((data[i] != 0xF7) && (j<80))
        {
            position = RUNNING_STATUS_ORDER[j++];
            redvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
            greenvalue = ((u8)(data[i++])>>2) & 0x3F; // truncate to 6 bit (0-63) 
  6c:	79e9      	ldrb	r1, [r5, #7]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:458
        
            colour = (greenvalue<<6)+redvalue;
  6e:	ea4f 0191 	mov.w	r1, r1, lsr #2
  72:	ea4f 1181 	mov.w	r1, r1, lsl #6
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:460
        
            Plot(position, colour, 0, PRECISION);
  76:	f814 0b01 	ldrb.w	r0, [r4], #1
  7a:	eb01 0193 	add.w	r1, r1, r3, lsr #2
  7e:	4632      	mov	r2, r6
  80:	463b      	mov	r3, r7
  82:	f7ff fffe 	bl	0 <Surface7bitLED>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:452
            Plot(position, colour, 0, PRECISION);
        }
    }
    else if (data[5] == 0x01) // we're doing a running update of the complete surface
    {
        while((data[i] != 0xF7) && (j<80))
  86:	7a2b      	ldrb	r3, [r5, #8]
  88:	2bf7      	cmp	r3, #247	; 0xf7
  8a:	d003      	beq.n	94 <Surface7bitLED+0x94>
  8c:	f105 0502 	add.w	r5, r5, #2
  90:	4544      	cmp	r4, r8
  92:	d1eb      	bne.n	6c <Surface7bitLED+0x6c>
  94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  98:	00000000 	.word	0x00000000

Disassembly of section .text.surface_blank:

00000000 <surface_blank>:
surface_blank():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:519

// ____________________________________________________________________________
//

void surface_blank()
{
   0:	4815b4f0 	.word	0x4815b4f0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:522
    // blank all LEDs
    u8 b,i;
	for (i=0; i<NLED; i++)
   4:	4915      	ldr	r1, [pc, #84]	; (5c <surface_blank+0x5c>)
   6:	f100 07a8 	add.w	r7, r0, #168	; 0xa8
   a:	f101 06a8 	add.w	r6, r1, #168	; 0xa8
   e:	f500 75a8 	add.w	r5, r0, #336	; 0x150
  12:	f501 74a8 	add.w	r4, r1, #336	; 0x150
  16:	f04f 0200 	mov.w	r2, #0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:526
	{
        for (b=0; b<NBANKS; b++)
		{
            LedValue[b][i] = 0x00;
  1a:	4613      	mov	r3, r2
  1c:	f800 3b01 	strb.w	r3, [r0], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:527
            LedMasterValue[b][i] = 0x00;
  20:	f801 3b01 	strb.w	r3, [r1], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:526
    u8 b,i;
	for (i=0; i<NLED; i++)
	{
        for (b=0; b<NBANKS; b++)
		{
            LedValue[b][i] = 0x00;
  24:	f807 3b01 	strb.w	r3, [r7], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:527
            LedMasterValue[b][i] = 0x00;
  28:	f806 3b01 	strb.w	r3, [r6], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:526
    u8 b,i;
	for (i=0; i<NLED; i++)
	{
        for (b=0; b<NBANKS; b++)
		{
            LedValue[b][i] = 0x00;
  2c:	f805 3b01 	strb.w	r3, [r5], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:527
            LedMasterValue[b][i] = 0x00;
  30:	f804 3b01 	strb.w	r3, [r4], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:522

void surface_blank()
{
    // blank all LEDs
    u8 b,i;
	for (i=0; i<NLED; i++)
  34:	f102 0201 	add.w	r2, r2, #1
  38:	b2d2      	uxtb	r2, r2
  3a:	2aa8      	cmp	r2, #168	; 0xa8
  3c:	d1ee      	bne.n	1c <surface_blank+0x1c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:530
		{
            LedValue[b][i] = 0x00;
            LedMasterValue[b][i] = 0x00;
		}
	}
    Col = 0;
  3e:	f04f 0300 	mov.w	r3, #0
  42:	4a07      	ldr	r2, [pc, #28]	; (60 <surface_blank+0x60>)
  44:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:531
    ColOrder = 0;
  46:	4a07      	ldr	r2, [pc, #28]	; (64 <surface_blank+0x64>)
  48:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:532
    BrightBit = 0;
  4a:	4a07      	ldr	r2, [pc, #28]	; (68 <surface_blank+0x68>)
  4c:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:533
    Mode = 0;
  4e:	4a07      	ldr	r2, [pc, #28]	; (6c <surface_blank+0x6c>)
  50:	7013      	strb	r3, [r2, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:534
}
  52:	bcf0      	pop	{r4, r5, r6, r7}
  54:	4770      	bx	lr
  56:	bf00      	nop
	...

Disassembly of section .text.surface_vegas_blank:

00000000 <surface_vegas_blank>:
surface_vegas_blank():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:540

// ____________________________________________________________________________
//

void surface_vegas_blank()
{
   0:	4b04      	ldr	r3, [pc, #16]	; (14 <surface_vegas_blank+0x14>)
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:539
}

// ____________________________________________________________________________
//

void surface_vegas_blank()
   2:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:545
{
    u8 i;

    for (i=0; i<NLED; i++)
    {
        LedValue[VEGAS_BANK][i] = 0x00;
   6:	f04f 0200 	mov.w	r2, #0
   a:	f803 2b01 	strb.w	r2, [r3], #1
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:543

void surface_vegas_blank()
{
    u8 i;

    for (i=0; i<NLED; i++)
   e:	428b      	cmp	r3, r1
  10:	d1fb      	bne.n	a <surface_vegas_blank+0xa>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:547
    {
        LedValue[VEGAS_BANK][i] = 0x00;
    }
}
  12:	4770      	bx	lr
  14:	00000150 	.word	0x00000150

Disassembly of section .text.CheckSpecialButton:

00000000 <CheckSpecialButton>:
CheckSpecialButton():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:663
// Switch Reading Routines
// ____________________________________________________________________________
//

void CheckSpecialButton(u8 Index, u8 Pressed)
{
   0:	b510      	push	{r4, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:665
    // check for the four Automap buttons being pressed : button indices 76-79
    if (Index >= 76)
   2:	284b      	cmp	r0, #75	; 0x4b
   4:	d911      	bls.n	2a <CheckSpecialButton+0x2a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:667
    {
        if (Pressed)
   6:	b141      	cbz	r1, 1a <CheckSpecialButton+0x1a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:669
        {
            AutomapButtonsHeld |= ORMASK[Index-76];
   8:	4b10      	ldr	r3, [pc, #64]	; (4c <CheckSpecialButton+0x4c>)
   a:	4a11      	ldr	r2, [pc, #68]	; (50 <CheckSpecialButton+0x50>)
   c:	1812      	adds	r2, r2, r0
   e:	7a14      	ldrb	r4, [r2, #8]
  10:	781a      	ldrb	r2, [r3, #0]
  12:	ea44 0202 	orr.w	r2, r4, r2
  16:	701a      	strb	r2, [r3, #0]
  18:	e007      	b.n	2a <CheckSpecialButton+0x2a>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:673
        }
        else
        {
            AutomapButtonsHeld &= ANDMASK[Index-76];
  1a:	4b0c      	ldr	r3, [pc, #48]	; (4c <CheckSpecialButton+0x4c>)
  1c:	4a0c      	ldr	r2, [pc, #48]	; (50 <CheckSpecialButton+0x50>)
  1e:	1812      	adds	r2, r2, r0
  20:	7d14      	ldrb	r4, [r2, #20]
  22:	781a      	ldrb	r2, [r3, #0]
  24:	ea04 0202 	and.w	r2, r4, r2
  28:	701a      	strb	r2, [r3, #0]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:677
        }
    }

    if (AutomapButtonsHeld == 0xF) // all four buttons held down
  2a:	4b08      	ldr	r3, [pc, #32]	; (4c <CheckSpecialButton+0x4c>)
  2c:	781b      	ldrb	r3, [r3, #0]
  2e:	2b0f      	cmp	r3, #15
  30:	d10a      	bne.n	48 <CheckSpecialButton+0x48>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:679
    {
        if ((Index == 73) && (!Pressed))
  32:	2849      	cmp	r0, #73	; 0x49
  34:	d108      	bne.n	48 <CheckSpecialButton+0x48>
  36:	b939      	cbnz	r1, 48 <CheckSpecialButton+0x48>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:682
        {
            // down button is tapped and released: toggle vegas mode
            if (VegasActive)
  38:	4b06      	ldr	r3, [pc, #24]	; (54 <CheckSpecialButton+0x54>)
  3a:	781b      	ldrb	r3, [r3, #0]
  3c:	b113      	cbz	r3, 44 <CheckSpecialButton+0x44>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:685
            {
                // it's on; we need to turn it off
                DisengageVegasAndText();
  3e:	f7ff fffe 	bl	0 <CheckSpecialButton>
  42:	bd10      	pop	{r4, pc}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:690
            }
            else
            {
                // it's off; we need to turn it on
                EngageVegas();
  44:	f7ff fffe 	bl	0 <CheckSpecialButton>
  48:	bd10      	pop	{r4, pc}
  4a:	bf00      	nop
	...

Disassembly of section .text.SwitchPressed:

00000000 <SwitchPressed>:
SwitchPressed():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:700

// ____________________________________________________________________________
//

void SwitchPressed(u8 Index)
{
   0:	b510      	push	{r4, lr}
   2:	b082      	sub	sp, #8
   4:	4604      	mov	r4, r0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:702
    // are we in drum rack mode?
    const u8* Layout = (CurrentKeyLayout) ? LAYOUT2 : LAYOUT1;
   6:	4b0d      	ldr	r3, [pc, #52]	; (3c <SwitchPressed+0x3c>)
   8:	7819      	ldrb	r1, [r3, #0]
   a:	4a0d      	ldr	r2, [pc, #52]	; (40 <SwitchPressed+0x40>)
   c:	4b0d      	ldr	r3, [pc, #52]	; (44 <SwitchPressed+0x44>)
   e:	2900      	cmp	r1, #0
  10:	bf18      	it	ne
  12:	4613      	movne	r3, r2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:704

    if (Index >= 72) // top eight buttons send CC messages
  14:	2847      	cmp	r0, #71	; 0x47
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:706
    {
        fifo_push4(&Event, 0x0B, 0xB0, Layout[Index], 0x7F);
  16:	5c1b      	ldrb	r3, [r3, r0]
  18:	f04f 027f 	mov.w	r2, #127	; 0x7f
  1c:	9200      	str	r2, [sp, #0]
  1e:	480a      	ldr	r0, [pc, #40]	; (48 <SwitchPressed+0x48>)
  20:	bf87      	ittee	hi
  22:	210b      	movhi	r1, #11
  24:	22b0      	movhi	r2, #176	; 0xb0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:710
    }
    else             // every other button sends a note message
    {
        fifo_push4(&Event, 0x09, 0x90, Layout[Index], 0x7F);
  26:	2109      	movls	r1, #9
  28:	2290      	movls	r2, #144	; 0x90
  2a:	f7ff fffe 	bl	0 <fifo_push4>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:713
    }

    CheckSpecialButton(Index,1);
  2e:	4620      	mov	r0, r4
  30:	f04f 0101 	mov.w	r1, #1
  34:	f7ff fffe 	bl	0 <SwitchPressed>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:714
}
  38:	b002      	add	sp, #8
  3a:	bd10      	pop	{r4, pc}
	...

Disassembly of section .text.SwitchReleased:

00000000 <SwitchReleased>:
SwitchReleased():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:720

// ____________________________________________________________________________
//

void SwitchReleased(u8 Index)
{
   0:	b510      	push	{r4, lr}
   2:	b082      	sub	sp, #8
   4:	4604      	mov	r4, r0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:722
    // are we in drum rack mode?
    const u8* Layout = (CurrentKeyLayout) ? LAYOUT2 : LAYOUT1;
   6:	4b0d      	ldr	r3, [pc, #52]	; (3c <SwitchReleased+0x3c>)
   8:	7819      	ldrb	r1, [r3, #0]
   a:	4a0d      	ldr	r2, [pc, #52]	; (40 <SwitchReleased+0x40>)
   c:	4b0d      	ldr	r3, [pc, #52]	; (44 <SwitchReleased+0x44>)
   e:	2900      	cmp	r1, #0
  10:	bf18      	it	ne
  12:	4613      	movne	r3, r2
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:724

    if (Index >= 72) // top eight buttons send CC messages
  14:	2847      	cmp	r0, #71	; 0x47
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:726
    {
        fifo_push4(&Event, 0x0B, 0xB0, Layout[Index], 0x00);
  16:	5c1b      	ldrb	r3, [r3, r0]
  18:	f04f 0200 	mov.w	r2, #0
  1c:	9200      	str	r2, [sp, #0]
  1e:	480a      	ldr	r0, [pc, #40]	; (48 <SwitchReleased+0x48>)
  20:	bf87      	ittee	hi
  22:	210b      	movhi	r1, #11
  24:	22b0      	movhi	r2, #176	; 0xb0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:730
    }
    else             // every other button sends a note message
    {
        fifo_push4(&Event, 0x09, 0x90, Layout[Index], 0x00);
  26:	2109      	movls	r1, #9
  28:	2290      	movls	r2, #144	; 0x90
  2a:	f7ff fffe 	bl	0 <fifo_push4>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:733
    }

    CheckSpecialButton(Index, 0);
  2e:	4620      	mov	r0, r4
  30:	f04f 0100 	mov.w	r1, #0
  34:	f7ff fffe 	bl	0 <SwitchReleased>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:734
}
  38:	b002      	add	sp, #8
  3a:	bd10      	pop	{r4, pc}
	...

Disassembly of section .text.read_switches:

00000000 <read_switches>:
read_switches():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:740

// ____________________________________________________________________________
//

void read_switches()
{
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b083      	sub	sp, #12
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:739
}

// ____________________________________________________________________________
//

void read_switches()
   6:	4b1d      	ldr	r3, [pc, #116]	; (7c <read_switches+0x7c>)
   8:	9301      	str	r3, [sp, #4]
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:744
{
    u8 i, bitaddress, data, index;
    s8 b;

    bitaddress = 0;
   a:	f04f 0b00 	mov.w	fp, #0
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:739
}

// ____________________________________________________________________________
//

void read_switches()
   e:	4b1c      	ldr	r3, [pc, #112]	; (80 <read_switches+0x80>)
  10:	f103 0854 	add.w	r8, r3, #84	; 0x54
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:752
    {
        data = SwitchData[i];

        for (b=7; b>=0; b--)
        {
            index = SWITCH_MAP[bitaddress++]; // find actual button number
  14:	f8df 906c 	ldr.w	r9, [pc, #108]	; 84 <read_switches+0x84>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:763
                    SwitchPressed(index);
                }
            }
            else
            {
                if (switch_is_off(&Switches[index], RELEASE_TIMEOUT))
  18:	f8df a06c 	ldr.w	sl, [pc, #108]	; 88 <read_switches+0x88>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:748

    bitaddress = 0;

    for (i=0; i<(NCOLS*NSWBYTES); i++)
    {
        data = SwitchData[i];
  1c:	9b01      	ldr	r3, [sp, #4]
  1e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
  22:	9301      	str	r3, [sp, #4]
  24:	4b16      	ldr	r3, [pc, #88]	; (80 <read_switches+0x80>)
  26:	f103 055c 	add.w	r5, r3, #92	; 0x5c
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:739
}

// ____________________________________________________________________________
//

void read_switches()
  2a:	465c      	mov	r4, fp
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:752
    {
        data = SwitchData[i];

        for (b=7; b>=0; b--)
        {
            index = SWITCH_MAP[bitaddress++]; // find actual button number
  2c:	f819 6004 	ldrb.w	r6, [r9, r4]
  30:	f104 0401 	add.w	r4, r4, #1
  34:	b2e4      	uxtb	r4, r4
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:754

            if (data & ORMASK[b])
  36:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
  3a:	421f      	tst	r7, r3
  3c:	d008      	beq.n	50 <read_switches+0x50>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:756
            {
                if (switch_is_on(&Switches[index]))
  3e:	eb0a 0006 	add.w	r0, sl, r6
  42:	f7ff fffe 	bl	0 <switch_is_on>
  46:	b168      	cbz	r0, 64 <read_switches+0x64>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:758
                {
                    SwitchPressed(index);
  48:	4630      	mov	r0, r6
  4a:	f7ff fffe 	bl	0 <read_switches>
  4e:	e009      	b.n	64 <read_switches+0x64>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:763
                }
            }
            else
            {
                if (switch_is_off(&Switches[index], RELEASE_TIMEOUT))
  50:	eb0a 0006 	add.w	r0, sl, r6
  54:	f04f 0128 	mov.w	r1, #40	; 0x28
  58:	f7ff fffe 	bl	0 <switch_is_off>
  5c:	b110      	cbz	r0, 64 <read_switches+0x64>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:765
                {
                    SwitchReleased(index);
  5e:	4630      	mov	r0, r6
  60:	f7ff fffe 	bl	0 <read_switches>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:750

    for (i=0; i<(NCOLS*NSWBYTES); i++)
    {
        data = SwitchData[i];

        for (b=7; b>=0; b--)
  64:	4545      	cmp	r5, r8
  66:	d1e1      	bne.n	2c <read_switches+0x2c>
  68:	f10b 0b08 	add.w	fp, fp, #8
  6c:	fa5f fb8b 	uxtb.w	fp, fp
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:746
    u8 i, bitaddress, data, index;
    s8 b;

    bitaddress = 0;

    for (i=0; i<(NCOLS*NSWBYTES); i++)
  70:	f1bb 0f60 	cmp.w	fp, #96	; 0x60
  74:	d1d2      	bne.n	1c <read_switches+0x1c>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:772
            }
            // b loop
        }
        // i loop
    }
}
  76:	b003      	add	sp, #12
  78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  7c:	ffffffff 	.word	0xffffffff
	...

Disassembly of section .text.surface_1khz:

00000000 <surface_1khz>:
surface_1khz():
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:778

// ____________________________________________________________________________
//

void surface_1khz()
{
   0:	b508      	push	{r3, lr}
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:779
    read_switches(); // check for event press
   2:	f7ff fffe 	bl	0 <surface_1khz>
C:\Users\rosschisholm\Documents\Work\Sonar Launchpad\main/surface.c:780
}
   6:	bd08      	pop	{r3, pc}
